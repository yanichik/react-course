{"ast":null,"code":"var _jsxFileName = \"/Users/yanichik/Documents/0_Coding/1_Udemy Courses/react-course/src/store/favorites-context.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\"; // FavoritesContext will contain React component therefore capitalized\n// takes parameter to set the context. in this case, it is the array of favorites\n// and total # of favorites, both starting at blank and 0\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FavoritesContext = /*#__PURE__*/createContext({\n  favorites: [],\n  totalFavorites: 0,\n  // these three will help with autocompletion later\n  addFavorite: favoriteMeetup => {},\n  removeFavorite: meetupId => {},\n  itemIsFavorite: meetupId => {}\n}); // this component function will be responsible for providing the favorites context\n// to all of the other application's components that depend on or are listening to\n// the favorites context b/c they are doing something with it, whether just displaying\n// the # of favorites (as in case of the navigationlayout) or adding/deleting a favorite, etc.\n// It will also update the context values.\n\nexport function FavoritesContextProvider(props) {\n  _s();\n\n  // userFavorites is an array that holds all favorites\n  const [userFavorites, setUserFavorites] = useState([]);\n\n  function addFavoriteHandler(favoriteMeetup) {\n    // when set state function receives function parameter, then the prev state gets\n    // passed in\n    setUserFavorites(prevUserFavorites => {\n      return userFavorites.concat(favoriteMeetup);\n    });\n  }\n\n  function removeFavoriteHandler(meetupId) {\n    setUserFavorites(prevUserFavorites => {\n      return prevUserFavorites.filter(meetup => meetup.id !== meetupId);\n    });\n  } // helper function to check if item is part of favorites\n\n\n  function itemIsFavoriteHandler(meetupId) {\n    // some is a vanilla JS method that returns true if the condition is met for\n    // any of the userFavorites array\n    return userFavorites.some(meetup => meetup.id === meetupId);\n  } // holds latest favorites values\n\n\n  const context = {\n    favorites: userFavorites,\n    totalFavorites: userFavorites.length,\n    addFavorite: addFavoriteHandler,\n    removeFavorite: removeFavoriteHandler,\n    itemIsFavorite: itemIsFavoriteHandler\n  }; // .Provider is an built-in property (component) of createContext\n  // We will wrap this around the entire application in index.js so that\n  // the favorites context can be distributed to the rest of the app, therefore\n  // need to include all the children\n  // values holds context (latest favorites values) so it can be distributed to all listening\n\n  return /*#__PURE__*/_jsxDEV(FavoritesContext.Provider, {\n    values: context,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 3\n  }, this);\n}\n\n_s(FavoritesContextProvider, \"UlopS2AxBLjN23/y+OKS+T5dH2M=\");\n\n_c = FavoritesContextProvider;\nexport default FavoritesContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"FavoritesContextProvider\");","map":{"version":3,"sources":["/Users/yanichik/Documents/0_Coding/1_Udemy Courses/react-course/src/store/favorites-context.js"],"names":["createContext","useState","FavoritesContext","favorites","totalFavorites","addFavorite","favoriteMeetup","removeFavorite","meetupId","itemIsFavorite","FavoritesContextProvider","props","userFavorites","setUserFavorites","addFavoriteHandler","prevUserFavorites","concat","removeFavoriteHandler","filter","meetup","id","itemIsFavoriteHandler","some","context","length","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC,C,CAEA;AACA;AACA;;;AACA,MAAMC,gBAAgB,gBAAGF,aAAa,CAAC;AACtCG,EAAAA,SAAS,EAAE,EAD2B;AAEtCC,EAAAA,cAAc,EAAE,CAFsB;AAGtC;AACAC,EAAAA,WAAW,EAAGC,cAAD,IAAoB,CAAE,CAJG;AAKtCC,EAAAA,cAAc,EAAGC,QAAD,IAAc,CAAE,CALM;AAMtCC,EAAAA,cAAc,EAAGD,QAAD,IAAc,CAAE;AANM,CAAD,CAAtC,C,CASA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,wBAAT,CAAkCC,KAAlC,EAAyC;AAAA;;AAC/C;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,EAAD,CAAlD;;AAEA,WAASa,kBAAT,CAA4BR,cAA5B,EAA4C;AAC3C;AACA;AACAO,IAAAA,gBAAgB,CAAEE,iBAAD,IAAuB;AACvC,aAAOH,aAAa,CAACI,MAAd,CAAqBV,cAArB,CAAP;AACA,KAFe,CAAhB;AAGA;;AAED,WAASW,qBAAT,CAA+BT,QAA/B,EAAyC;AACxCK,IAAAA,gBAAgB,CAAEE,iBAAD,IAAuB;AACvC,aAAOA,iBAAiB,CAACG,MAAlB,CAA0BC,MAAD,IAAYA,MAAM,CAACC,EAAP,KAAcZ,QAAnD,CAAP;AACA,KAFe,CAAhB;AAGA,GAhB8C,CAkB/C;;;AACA,WAASa,qBAAT,CAA+Bb,QAA/B,EAAyC;AACxC;AACA;AACA,WAAOI,aAAa,CAACU,IAAd,CAAoBH,MAAD,IAAYA,MAAM,CAACC,EAAP,KAAcZ,QAA7C,CAAP;AACA,GAvB8C,CAyB/C;;;AACA,QAAMe,OAAO,GAAG;AACfpB,IAAAA,SAAS,EAAES,aADI;AAEfR,IAAAA,cAAc,EAAEQ,aAAa,CAACY,MAFf;AAGfnB,IAAAA,WAAW,EAAES,kBAHE;AAIfP,IAAAA,cAAc,EAAEU,qBAJD;AAKfR,IAAAA,cAAc,EAAEY;AALD,GAAhB,CA1B+C,CAiC/C;AACA;AACA;AACA;AACA;;AACA,sBACC,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,MAAM,EAAEE,OAAnC;AAAA,cACEZ,KAAK,CAACc;AADR;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;GA3Cef,wB;;KAAAA,wB;AA6ChB,eAAeR,gBAAf","sourcesContent":["import { createContext, useState } from \"react\";\n\n// FavoritesContext will contain React component therefore capitalized\n// takes parameter to set the context. in this case, it is the array of favorites\n// and total # of favorites, both starting at blank and 0\nconst FavoritesContext = createContext({\n\tfavorites: [],\n\ttotalFavorites: 0,\n\t// these three will help with autocompletion later\n\taddFavorite: (favoriteMeetup) => {},\n\tremoveFavorite: (meetupId) => {},\n\titemIsFavorite: (meetupId) => {},\n});\n\n// this component function will be responsible for providing the favorites context\n// to all of the other application's components that depend on or are listening to\n// the favorites context b/c they are doing something with it, whether just displaying\n// the # of favorites (as in case of the navigationlayout) or adding/deleting a favorite, etc.\n// It will also update the context values.\nexport function FavoritesContextProvider(props) {\n\t// userFavorites is an array that holds all favorites\n\tconst [userFavorites, setUserFavorites] = useState([]);\n\n\tfunction addFavoriteHandler(favoriteMeetup) {\n\t\t// when set state function receives function parameter, then the prev state gets\n\t\t// passed in\n\t\tsetUserFavorites((prevUserFavorites) => {\n\t\t\treturn userFavorites.concat(favoriteMeetup);\n\t\t});\n\t}\n\n\tfunction removeFavoriteHandler(meetupId) {\n\t\tsetUserFavorites((prevUserFavorites) => {\n\t\t\treturn prevUserFavorites.filter((meetup) => meetup.id !== meetupId);\n\t\t});\n\t}\n\n\t// helper function to check if item is part of favorites\n\tfunction itemIsFavoriteHandler(meetupId) {\n\t\t// some is a vanilla JS method that returns true if the condition is met for\n\t\t// any of the userFavorites array\n\t\treturn userFavorites.some((meetup) => meetup.id === meetupId);\n\t}\n\n\t// holds latest favorites values\n\tconst context = {\n\t\tfavorites: userFavorites,\n\t\ttotalFavorites: userFavorites.length,\n\t\taddFavorite: addFavoriteHandler,\n\t\tremoveFavorite: removeFavoriteHandler,\n\t\titemIsFavorite: itemIsFavoriteHandler,\n\t};\n\t// .Provider is an built-in property (component) of createContext\n\t// We will wrap this around the entire application in index.js so that\n\t// the favorites context can be distributed to the rest of the app, therefore\n\t// need to include all the children\n\t// values holds context (latest favorites values) so it can be distributed to all listening\n\treturn (\n\t\t<FavoritesContext.Provider values={context}>\n\t\t\t{props.children}\n\t\t</FavoritesContext.Provider>\n\t);\n}\n\nexport default FavoritesContext;\n"]},"metadata":{},"sourceType":"module"}