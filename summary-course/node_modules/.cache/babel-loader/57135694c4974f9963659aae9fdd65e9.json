{"ast":null,"code":"var _jsxFileName = \"/Users/yanichik/Documents/0_Coding/1_Udemy Courses/react-course/summary-course/src/pages/AllMeetups.js\",\n    _s = $RefreshSig$();\n\nimport MeetupList from \"../components/meetups/MeetupList.js\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AllMeetupsPage() {\n  _s();\n\n  // set useState b/c fetch returns a promise but JS will not wait to fetch the data before\n  // rendering the return code, thus using state to have load something (s/ loading clock)\n  // until the fetch is complete, then will render with data\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadedMeetups, setLoadedMeetups] = useState([]);\n  useEffect(() => {\n    fetch(\"https://react-getting-started-be137-default-rtdb.firebaseio.com/meetups.json\").then(res => {\n      return res.json();\n    }).then(data => {\n      let meetups = []; // data is received from firebase is object of keys and objects where the key\n      // is randomly generated number and object is the actual data object/meetup.\n      // we need an array of objects b/c we map this data in MeetupList.js\n\n      for (const key in data) {\n        const meetup = {\n          id: key,\n          // ...data[key] spreads the rest of the object\n          ...data[key]\n        };\n        meetups.push(meetup);\n      }\n\n      setIsLoading(false);\n      setLoadedMeetups(meetups);\n    });\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"--- Waiting to Load ---\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: \"25px\",\n          \"font-weight\": \"bolder\"\n        },\n        children: \"All Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n        meetups: loadedMeetups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }, this);\n  }\n}\n\n_s(AllMeetupsPage, \"JeEKF2tZ58/s7PjUTNq9ybMF8W0=\");\n\n_c = AllMeetupsPage;\nexport default AllMeetupsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllMeetupsPage\");","map":{"version":3,"sources":["/Users/yanichik/Documents/0_Coding/1_Udemy Courses/react-course/summary-course/src/pages/AllMeetups.js"],"names":["MeetupList","useState","useEffect","AllMeetupsPage","isLoading","setIsLoading","loadedMeetups","setLoadedMeetups","fetch","then","res","json","data","meetups","key","meetup","id","push","fontSize"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,qCAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AACA,SAASC,cAAT,GAA0B;AAAA;;AACzB;AACA;AACA;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,EAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACfM,IAAAA,KAAK,CACJ,8EADI,CAAL,CAGEC,IAHF,CAGQC,GAAD,IAAS;AACd,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACA,KALF,EAMEF,IANF,CAMQG,IAAD,IAAU;AACf,UAAIC,OAAO,GAAE,EAAb,CADe,CAEf;AACA;AACA;;AACA,WAAK,MAAMC,GAAX,IAAkBF,IAAlB,EAAuB;AACtB,cAAMG,MAAM,GAAG;AACdC,UAAAA,EAAE,EAAEF,GADU;AAEd;AACA,aAAGF,IAAI,CAACE,GAAD;AAHO,SAAf;AAKAD,QAAAA,OAAO,CAACI,IAAR,CAAaF,MAAb;AACA;;AACDV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,gBAAgB,CAACM,OAAD,CAAhB;AACA,KArBF;AAsBA,GAvBQ,EAuBN,EAvBM,CAAT;;AAyBA,MAAIT,SAAJ,EAAe;AACd,wBACC;AAAA,6BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD;AAKA,GAND,MAMO;AACN,wBACC;AAAA,8BACC;AAAK,QAAA,KAAK,EAAE;AAAEc,UAAAA,QAAQ,EAAE,MAAZ;AAAoB,yBAAe;AAAnC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAIC,QAAC,UAAD;AAAY,QAAA,OAAO,EAAEZ;AAArB;AAAA;AAAA;AAAA;AAAA,cAJD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAQA;AACD;;GAhDQH,c;;KAAAA,c;AAiDT,eAAeA,cAAf","sourcesContent":["import MeetupList from \"../components/meetups/MeetupList.js\";\nimport { useState, useEffect } from \"react\";\nfunction AllMeetupsPage() {\n\t// set useState b/c fetch returns a promise but JS will not wait to fetch the data before\n\t// rendering the return code, thus using state to have load something (s/ loading clock)\n\t// until the fetch is complete, then will render with data\n\tconst [isLoading, setIsLoading] = useState(true);\n\tconst [loadedMeetups, setLoadedMeetups] = useState([]);\n\n\tuseEffect(() => {\n\t\tfetch(\n\t\t\t\"https://react-getting-started-be137-default-rtdb.firebaseio.com/meetups.json\"\n\t\t)\n\t\t\t.then((res) => {\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tlet meetups =[];\n\t\t\t\t// data is received from firebase is object of keys and objects where the key\n\t\t\t\t// is randomly generated number and object is the actual data object/meetup.\n\t\t\t\t// we need an array of objects b/c we map this data in MeetupList.js\n\t\t\t\tfor (const key in data){\n\t\t\t\t\tconst meetup = {\n\t\t\t\t\t\tid: key,\n\t\t\t\t\t\t// ...data[key] spreads the rest of the object\n\t\t\t\t\t\t...data[key]\n\t\t\t\t\t}\n\t\t\t\t\tmeetups.push(meetup)\n\t\t\t\t}\n\t\t\t\tsetIsLoading(false);\n\t\t\t\tsetLoadedMeetups(meetups);\n\t\t\t});\n\t}, []);\n\n\tif (isLoading) {\n\t\treturn (\n\t\t\t<section>\n\t\t\t\t<p>--- Waiting to Load ---</p>\n\t\t\t</section>\n\t\t);\n\t} else {\n\t\treturn (\n\t\t\t<section>\n\t\t\t\t<div style={{ fontSize: \"25px\", \"font-weight\": \"bolder\" }}>\n\t\t\t\t\tAll Meetups\n\t\t\t\t</div>\n\t\t\t\t<MeetupList meetups={loadedMeetups} />\n\t\t\t</section>\n\t\t);\n\t}\n}\nexport default AllMeetupsPage;\n"]},"metadata":{},"sourceType":"module"}