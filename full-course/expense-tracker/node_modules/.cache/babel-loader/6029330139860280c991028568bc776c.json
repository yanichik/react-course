{"ast":null,"code":"var _jsxFileName = \"/Users/yanichik/Documents/0_Coding/1_Udemy Courses/react-course/full-course/expense-tracker/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseForm() {\n  _s();\n\n  // preferred way: Multiple states, NOT single state\n  // Multiple States:\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\"); // Single State:\n  // const [userInput, setUserInput] = useState({\n  // \tenteredTitle: \"\",\n  // \tenteredAmount: \"\",\n  // \tenteredDate: \"\",\n  // });\n\n  function titleChangeHandler(e) {\n    // preferred way: Multiple states, NOT single state\n    setEnteredTitle(e.target.value); // when setting state, the changed state is always in string format.\n    // setUserInput({\n    // when updating with handler must \"update\" all elements of object, otherwise if\n    // updating only one, the rest will be dropped. the workaround is to use the spread operater\n    // to bring in all of the values and then ONLY update the one you want with this specific\n    // handler\n    // \t...userInput,\n    // \tenteredTitle: e.target.value,\n    // });\n    // IF/WHEN new state depends on previous state, use anonymous func to set state:\n    // setUserInput((prevState) => {\n    //   return {\n    //     ...prevState,\n    //     enteredTitle: e.target.value\n    //   };\n    // }\n  }\n\n  function amountChangeHandler(e) {\n    // preferred way: Multiple states, NOT single state\n    setEnteredAmount(e.target.value); // setUserInput({\n    // \t...userInput,\n    // \tenteredAmount: e.target.value,\n    // });\n  }\n\n  function dateChangeHandler(e) {\n    // preferred way: Multiple states, NOT single state\n    setEnteredDate(e.target.value); // setUserInput({\n    // \t...userInput,\n    // \tenteredDate: e.target.value,\n    // });\n  }\n\n  function submitHandler(e) {\n    e.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    console.log(expenseData);\n    setEnteredAmount(\"\");\n    setEnteredTitle(\"\");\n    setEnteredDate(\"\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \".01\",\n          step: \".01\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 3\n  }, this);\n}\n\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["/Users/yanichik/Documents/0_Coding/1_Udemy Courses/react-course/full-course/expense-tracker/src/components/NewExpense/ExpenseForm.js"],"names":["useState","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","e","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","console","log"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport \"./ExpenseForm.css\";\n\nfunction ExpenseForm() {\n\t// preferred way: Multiple states, NOT single state\n\t// Multiple States:\n\tconst [enteredTitle, setEnteredTitle] = useState(\"\");\n\tconst [enteredAmount, setEnteredAmount] = useState(\"\");\n\tconst [enteredDate, setEnteredDate] = useState(\"\");\n\n\t// Single State:\n\t// const [userInput, setUserInput] = useState({\n\t// \tenteredTitle: \"\",\n\t// \tenteredAmount: \"\",\n\t// \tenteredDate: \"\",\n\t// });\n\n\tfunction titleChangeHandler(e) {\n\t\t// preferred way: Multiple states, NOT single state\n\t\tsetEnteredTitle(e.target.value);\n\n\t\t// when setting state, the changed state is always in string format.\n\t\t// setUserInput({\n\t\t// when updating with handler must \"update\" all elements of object, otherwise if\n\t\t// updating only one, the rest will be dropped. the workaround is to use the spread operater\n\t\t// to bring in all of the values and then ONLY update the one you want with this specific\n\t\t// handler\n\t\t// \t...userInput,\n\t\t// \tenteredTitle: e.target.value,\n\t\t// });\n\t\t// IF/WHEN new state depends on previous state, use anonymous func to set state:\n\t\t// setUserInput((prevState) => {\n\t\t//   return {\n\t\t//     ...prevState,\n\t\t//     enteredTitle: e.target.value\n\t\t//   };\n\t\t// }\n\t}\n\n\tfunction amountChangeHandler(e) {\n\t\t// preferred way: Multiple states, NOT single state\n\t\tsetEnteredAmount(e.target.value);\n\n\t\t// setUserInput({\n\t\t// \t...userInput,\n\t\t// \tenteredAmount: e.target.value,\n\t\t// });\n\t}\n\tfunction dateChangeHandler(e) {\n\t\t// preferred way: Multiple states, NOT single state\n\t\tsetEnteredDate(e.target.value);\n\n\t\t// setUserInput({\n\t\t// \t...userInput,\n\t\t// \tenteredDate: e.target.value,\n\t\t// });\n\t}\n\n\tfunction submitHandler(e) {\n\t\te.preventDefault();\n\t\tconst expenseData = {\n\t\t\ttitle: enteredTitle,\n\t\t\tamount: enteredAmount,\n\t\t\tdate: new Date(enteredDate),\n\t\t};\n\t\tconsole.log(expenseData);\n\t\tsetEnteredAmount(\"\");\n\t\tsetEnteredTitle(\"\");\n\t\tsetEnteredDate(\"\");\n\t}\n\treturn (\n\t\t<form onSubmit={submitHandler}>\n\t\t\t<div className=\"new-expense__controls\">\n\t\t\t\t<div className=\"new-expense__control\">\n\t\t\t\t\t<label>Title</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={enteredTitle}\n\t\t\t\t\t\tonChange={titleChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"new-expense__control\">\n\t\t\t\t\t<label>Amount</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tmin=\".01\"\n\t\t\t\t\t\tstep=\".01\"\n\t\t\t\t\t\tvalue={enteredAmount}\n\t\t\t\t\t\tonChange={amountChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"new-expense__control\">\n\t\t\t\t\t<label>Date</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"date\"\n\t\t\t\t\t\tmin=\"2019-01-01\"\n\t\t\t\t\t\tmax=\"2022-12-31\"\n\t\t\t\t\t\tvalue={enteredDate}\n\t\t\t\t\t\tonChange={dateChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"new-expense__actions\">\n\t\t\t\t<button type=\"submit\">Add Expense</button>\n\t\t\t</div>\n\t\t</form>\n\t);\n}\nexport default ExpenseForm;\n"]},"metadata":{},"sourceType":"module"}