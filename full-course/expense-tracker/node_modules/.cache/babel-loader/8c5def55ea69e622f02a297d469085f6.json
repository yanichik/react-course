{"ast":null,"code":"var _jsxFileName = \"/Users/yanichik/Documents/0_Coding/1_Udemy Courses/react-course/full-course/expense-tracker/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseForm() {\n  _s();\n\n  const [userInput, setUserInput] = useState({\n    enteredTitle: \"\",\n    enteredAmount: \"\",\n    enteredDate: \"\"\n  });\n\n  function titleChangeHandler(e) {\n    // when setting state, the changed state is always in string format.\n    setUserInput({ // when updating with handler must \"update\" all elements of object, otherwise if \n      // updating only one, the rest will be dropped. the workaround is to use the spread operater\n      // to bring in all of the values and then ONLY update the one you want with this specific\n      // handler\n      ...userInput,\n      enteredTitle: e.target.value\n    });\n  }\n\n  function amountChangeHandler(e) {\n    setEnteredAmount(e.target.value);\n  }\n\n  function dateChangeHandler(e) {\n    setEnteredDate(e.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \".01\",\n          step: \".01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 3\n  }, this);\n}\n\n_s(ExpenseForm, \"v2PgMbEaFvEqQwg0wi+gAJz5lZA=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["/Users/yanichik/Documents/0_Coding/1_Udemy Courses/react-course/full-course/expense-tracker/src/components/NewExpense/ExpenseForm.js"],"names":["useState","ExpenseForm","userInput","setUserInput","enteredTitle","enteredAmount","enteredDate","titleChangeHandler","e","target","value","amountChangeHandler","setEnteredAmount","dateChangeHandler","setEnteredDate"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,mBAAP;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC;AAC1CI,IAAAA,YAAY,EAAE,EAD4B;AAE1CC,IAAAA,aAAa,EAAE,EAF2B;AAG1CC,IAAAA,WAAW,EAAE;AAH6B,GAAD,CAA1C;;AAMA,WAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAC9B;AACAL,IAAAA,YAAY,CAAC,EACT;AACA;AACA;AACA;AACH,SAAGD,SALS;AAMTE,MAAAA,YAAY,EAAEI,CAAC,CAACC,MAAF,CAASC;AANd,KAAD,CAAZ;AAQA;;AACD,WAASC,mBAAT,CAA6BH,CAA7B,EAAgC;AAC/BI,IAAAA,gBAAgB,CAACJ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAhB;AACA;;AACD,WAASG,iBAAT,CAA2BL,CAA3B,EAA8B;AAC7BM,IAAAA,cAAc,CAACN,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACA;;AACD,sBACC;AAAA,4BACC;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,QAAQ,EAAEH;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAKC;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AACC,UAAA,IAAI,EAAC,QADN;AAEC,UAAA,GAAG,EAAC,KAFL;AAGC,UAAA,IAAI,EAAC,KAHN;AAIC,UAAA,QAAQ,EAAEI;AAJX;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cALD,eAcC;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AACC,UAAA,IAAI,EAAC,MADN;AAEC,UAAA,GAAG,EAAC,YAFL;AAGC,UAAA,GAAG,EAAC,YAHL;AAIC,UAAA,QAAQ,EAAEE;AAJX;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cAdD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAyBC;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,6BACC;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAzBD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AA+BA;;GAvDQZ,W;;KAAAA,W;AAwDT,eAAeA,WAAf","sourcesContent":["import { useState } from \"react\";\nimport \"./ExpenseForm.css\";\n\nfunction ExpenseForm() {\n\tconst [userInput, setUserInput] = useState({\n\t\tenteredTitle: \"\",\n\t\tenteredAmount: \"\",\n\t\tenteredDate: \"\",\n\t});\n\n\tfunction titleChangeHandler(e) {\n\t\t// when setting state, the changed state is always in string format.\n\t\tsetUserInput({\n      // when updating with handler must \"update\" all elements of object, otherwise if \n      // updating only one, the rest will be dropped. the workaround is to use the spread operater\n      // to bring in all of the values and then ONLY update the one you want with this specific\n      // handler\n\t\t\t...userInput,\n      enteredTitle: e.target.value\n\t\t});\n\t}\n\tfunction amountChangeHandler(e) {\n\t\tsetEnteredAmount(e.target.value);\n\t}\n\tfunction dateChangeHandler(e) {\n\t\tsetEnteredDate(e.target.value);\n\t}\n\treturn (\n\t\t<form>\n\t\t\t<div className=\"new-expense__controls\">\n\t\t\t\t<div className=\"new-expense__control\">\n\t\t\t\t\t<label>Title</label>\n\t\t\t\t\t<input type=\"text\" onChange={titleChangeHandler} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"new-expense__control\">\n\t\t\t\t\t<label>Amount</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tmin=\".01\"\n\t\t\t\t\t\tstep=\".01\"\n\t\t\t\t\t\tonChange={amountChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"new-expense__control\">\n\t\t\t\t\t<label>Date</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"date\"\n\t\t\t\t\t\tmin=\"2019-01-01\"\n\t\t\t\t\t\tmax=\"2022-12-31\"\n\t\t\t\t\t\tonChange={dateChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"new-expense__actions\">\n\t\t\t\t<button type=\"submit\">Add Expense</button>\n\t\t\t</div>\n\t\t</form>\n\t);\n}\nexport default ExpenseForm;\n"]},"metadata":{},"sourceType":"module"}