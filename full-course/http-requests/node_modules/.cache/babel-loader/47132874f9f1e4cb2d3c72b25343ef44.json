{"ast":null,"code":"var _jsxFileName = \"/Users/yanichik/Documents/0_Coding/1_Udemy Courses/react-course/full-course/http-requests/src/App.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport AddMovie from \"./components/AddMovie\"; // import { useState }, React from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(prevStatus => !prevStatus);\n\n    try {\n      // Fetch default method is GET so do not need another argument. fetch returns promise\n      // which needs to be asynchronous code by using async-await, OR \"then\" call.\n      // When using async-await, need to use try-catch to handle errors.\n      // NOTE that fetch API DOES NOT treat error status codes as real errors & it WILL NOT\n      // throw a technical error if get back an error status code. You will only receive a\n      // technical error when you try to do something with that data - in this case the\n      // first action is the \"await rsvp.json()\" would be the first action on the received data.\n      // Therefore, it's best practice to check data validity and throw a status error if data is invalid.\n      //\n      // const rsvp = await fetch(\"https://swapi.dev/api/films\");\n      const rsvp = await fetch(\"https://react-http-104c4-default-rtdb.firebaseio.com/movies.json\"); // checking if response is \"ok\" and throw error if data rsvp NOT OK\n\n      if (!rsvp.ok) {\n        throw new Error(\"Something Went Wrong!\");\n      }\n\n      const data = await rsvp.json();\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      const transformedMovies = data.results.map(movie => {\n        return {\n          id: movie.episode_id,\n          title: movie.title,\n          openingText: movie.opening_crawl,\n          releaseDate: movie.release_date\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(prevStatus => !prevStatus);\n    } catch (error) {\n      setError(error.message);\n    } // Dependencies:\n    // State functions DO NOT need to be added b/c React guarantees that they will never change.\n    // Besides that this function has NO external dependencies\n\n  }, []); // If you leave the dependencies blank, it will load only once upon first load of app.\n  // BUT the standard and best practice is to put all variables and functions that appear\n  // inside of the useEffect as dependencies of the useEffect. In this case, there is the\n  // function \"fetchMoviesHandler\", which does not actually change in this app, BUT if we\n  // were to have an external state which could change the insides of the function, we would\n  // want to add \"fetchMoviesHandler\" function as a dependency. NOW due to the fact that\n  // technically each time the app refreshes the function sits in a different memory location,\n  // we need to use the useCallback hook to 'remember' the function between refreshes. To use the\n  // hook, we need to convert the \"fetchMoviesHandler\" function definition from using the\n  // \"function\" keyword to the \"const\" keyword. Due to the way hoisting works for functions vs const,\n  // we need to place the useEffect (which calls \"fetchMoviesHandler\") AFTER the definition of the\n  // function.\n\n  useEffect(() => {\n    fetchMoviesHandler(); // By listing 'fetchMoviesHandler' as a dependency, this side effect will run whenever\n    // 'fetchMovieshandler' changes AND b/c functions are technically objects in JS, it will change\n    // each time it is re-run b/c it will point to new location. This will create infinite loop. Thus, you\n    // can ommit it from the dependcies list, which is ok in this specific case. BUT if there were some\n    // external states that could alter 'fetchMoviesHandler' you would need to keep it as a dependency.\n    // In that case, need to wrap 'fetchMoviesHandler' inside the useCallback, which guarantees that React\n    // returns the same function instance between renderings. JS equality check returns false to functions with\n    // the same code but located in different locations, therefore, the useCallback is crucial to pass\n    // the JS equality check between renderings.\n  }, [fetchMoviesHandler]);\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 16\n    }\n  }, \"No Movies Found. Try Again.\");\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, \"Loading ...\");\n  }\n\n  if (!isLoading && movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, error);\n  }\n\n  async function addMovieHandler(addedMovie) {\n    const rsvp = await fetch(\"https://react-http-104c4-default-rtdb.firebaseio.com/movies.json\", {\n      method: \"POST\",\n      // body requires json data in string format, NOT a JS object, therefore need to stringify\n      body: JSON.stringify(addedMovie),\n      headers: {\n        // technically Firebase DOES NOT require this header, but many other APIs will require\n        // this header definition to read the json data\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await rsvp.json();\n    console.log(data);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 4\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/yanichik/Documents/0_Coding/1_Udemy Courses/react-course/full-course/http-requests/src/App.js"],"names":["React","useState","useEffect","useCallback","AddMovie","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","prevStatus","rsvp","fetch","ok","Error","data","json","loadedMovies","key","push","id","title","openingText","releaseDate","transformedMovies","results","map","movie","episode_id","opening_crawl","release_date","message","content","length","addMovieHandler","addedMovie","method","body","JSON","stringify","headers","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport AddMovie from \"./components/AddMovie\";\n// import { useState }, React from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n\tconst [movies, setMovies] = useState([]);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [error, setError] = useState(null);\n\tconst fetchMoviesHandler = useCallback(async () => {\n\t\tsetIsLoading((prevStatus) => !prevStatus);\n\t\ttry {\n\t\t\t// Fetch default method is GET so do not need another argument. fetch returns promise\n\t\t\t// which needs to be asynchronous code by using async-await, OR \"then\" call.\n\t\t\t// When using async-await, need to use try-catch to handle errors.\n\t\t\t// NOTE that fetch API DOES NOT treat error status codes as real errors & it WILL NOT\n\t\t\t// throw a technical error if get back an error status code. You will only receive a\n\t\t\t// technical error when you try to do something with that data - in this case the\n\t\t\t// first action is the \"await rsvp.json()\" would be the first action on the received data.\n\t\t\t// Therefore, it's best practice to check data validity and throw a status error if data is invalid.\n\t\t\t//\n\t\t\t// const rsvp = await fetch(\"https://swapi.dev/api/films\");\n\t\t\tconst rsvp = await fetch(\n\t\t\t\t\"https://react-http-104c4-default-rtdb.firebaseio.com/movies.json\"\n\t\t\t);\n\t\t\t// checking if response is \"ok\" and throw error if data rsvp NOT OK\n\t\t\tif (!rsvp.ok) {\n\t\t\t\tthrow new Error(\"Something Went Wrong!\");\n\t\t\t}\n\t\t\tconst data = await rsvp.json();\n\t\t\tconst loadedMovies = [];\n\t\t\tfor (const key in data) {\n\t\t\t\tloadedMovies.push({\n\t\t\t\t\tid: key,\n\t\t\t\t\ttitle: data[key].title,\n\t\t\t\t\topeningText: data[key].openingText,\n\t\t\t\t\treleaseDate: data[key].releaseDate,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst transformedMovies = data.results.map((movie) => {\n\t\t\t\treturn {\n\t\t\t\t\tid: movie.episode_id,\n\t\t\t\t\ttitle: movie.title,\n\t\t\t\t\topeningText: movie.opening_crawl,\n\t\t\t\t\treleaseDate: movie.release_date,\n\t\t\t\t};\n\t\t\t});\n\t\t\tsetMovies(transformedMovies);\n\t\t\tsetIsLoading((prevStatus) => !prevStatus);\n\t\t} catch (error) {\n\t\t\tsetError(error.message);\n\t\t}\n\t\t// Dependencies:\n\t\t// State functions DO NOT need to be added b/c React guarantees that they will never change.\n\t\t// Besides that this function has NO external dependencies\n\t}, []);\n\n\t// If you leave the dependencies blank, it will load only once upon first load of app.\n\t// BUT the standard and best practice is to put all variables and functions that appear\n\t// inside of the useEffect as dependencies of the useEffect. In this case, there is the\n\t// function \"fetchMoviesHandler\", which does not actually change in this app, BUT if we\n\t// were to have an external state which could change the insides of the function, we would\n\t// want to add \"fetchMoviesHandler\" function as a dependency. NOW due to the fact that\n\t// technically each time the app refreshes the function sits in a different memory location,\n\t// we need to use the useCallback hook to 'remember' the function between refreshes. To use the\n\t// hook, we need to convert the \"fetchMoviesHandler\" function definition from using the\n\t// \"function\" keyword to the \"const\" keyword. Due to the way hoisting works for functions vs const,\n\t// we need to place the useEffect (which calls \"fetchMoviesHandler\") AFTER the definition of the\n\t// function.\n\tuseEffect(() => {\n\t\tfetchMoviesHandler();\n\t\t// By listing 'fetchMoviesHandler' as a dependency, this side effect will run whenever\n\t\t// 'fetchMovieshandler' changes AND b/c functions are technically objects in JS, it will change\n\t\t// each time it is re-run b/c it will point to new location. This will create infinite loop. Thus, you\n\t\t// can ommit it from the dependcies list, which is ok in this specific case. BUT if there were some\n\t\t// external states that could alter 'fetchMoviesHandler' you would need to keep it as a dependency.\n\t\t// In that case, need to wrap 'fetchMoviesHandler' inside the useCallback, which guarantees that React\n\t\t// returns the same function instance between renderings. JS equality check returns false to functions with\n\t\t// the same code but located in different locations, therefore, the useCallback is crucial to pass\n\t\t// the JS equality check between renderings.\n\t}, [fetchMoviesHandler]);\n\tlet content = <p>No Movies Found. Try Again.</p>;\n\tif (isLoading) {\n\t\tcontent = <p>Loading ...</p>;\n\t}\n\tif (!isLoading && movies.length > 0) {\n\t\tcontent = <MoviesList movies={movies} />;\n\t}\n\tif (error) {\n\t\tcontent = <p>{error}</p>;\n\t}\n\tasync function addMovieHandler(addedMovie) {\n\t\tconst rsvp = await fetch(\n\t\t\t\"https://react-http-104c4-default-rtdb.firebaseio.com/movies.json\",\n\t\t\t{\n\t\t\t\tmethod: \"POST\",\n\t\t\t\t// body requires json data in string format, NOT a JS object, therefore need to stringify\n\t\t\t\tbody: JSON.stringify(addedMovie),\n\t\t\t\theaders: {\n\t\t\t\t\t// technically Firebase DOES NOT require this header, but many other APIs will require\n\t\t\t\t\t// this header definition to read the json data\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t\tconst data = await rsvp.json();\n\t\tconsole.log(data);\n\t}\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<section>\n\t\t\t\t<AddMovie onAddMovie={addMovieHandler} />\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<button onClick={fetchMoviesHandler}>Fetch Movies</button>\n\t\t\t</section>\n\t\t\t<section>{content}</section>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}