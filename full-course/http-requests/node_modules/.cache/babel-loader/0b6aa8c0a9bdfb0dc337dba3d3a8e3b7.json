{"ast":null,"code":"var _jsxFileName = \"/Users/yanichik/Documents/0_Coding/1_Udemy Courses/react-course/full-course/http-requests/src/App.js\";\nimport React, { useState, useEffect } from \"react\"; // import { useState }, React from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(prevStatus => !prevStatus);\n\n    try {\n      const rsvp = await fetch(\"https://swapi.dev/api/films\");\n\n      if (!rsvp.ok) {\n        throw new Error(\"Something Went Wrong!\");\n      }\n\n      const data = await rsvp.json();\n      const transformedMovies = data.results.map(movie => {\n        return {\n          id: movie.episode_id,\n          title: movie.title,\n          openingText: movie.opening_crawl,\n          releaseDate: movie.release_date\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(prevStatus => !prevStatus);\n    } catch (error) {\n      setError(error.message);\n    }\n  }\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, []);\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }\n  }, \"No Movies Found. Try Again.\");\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, \"Loading ...\");\n  }\n\n  if (!isLoading && movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, error);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/yanichik/Documents/0_Coding/1_Udemy Courses/react-course/full-course/http-requests/src/App.js"],"names":["React","useState","useEffect","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","prevStatus","rsvp","fetch","ok","Error","data","json","transformedMovies","results","map","movie","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","content","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACd,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;;AACA,iBAAeU,kBAAf,GAAoC;AACnCH,IAAAA,YAAY,CAAEI,UAAD,IAAgB,CAACA,UAAlB,CAAZ;;AACA,QAAI;AACH,YAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAxB;;AACA,UAAI,CAACD,IAAI,CAACE,EAAV,EAAc;AACb,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACA;;AACD,YAAMC,IAAI,GAAG,MAAMJ,IAAI,CAACK,IAAL,EAAnB;AACA,YAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,KAAD,IAAW;AACrD,eAAO;AACNC,UAAAA,EAAE,EAAED,KAAK,CAACE,UADJ;AAENC,UAAAA,KAAK,EAAEH,KAAK,CAACG,KAFP;AAGNC,UAAAA,WAAW,EAAEJ,KAAK,CAACK,aAHb;AAINC,UAAAA,WAAW,EAAEN,KAAK,CAACO;AAJb,SAAP;AAMA,OAPyB,CAA1B;AAQAvB,MAAAA,SAAS,CAACa,iBAAD,CAAT;AACAX,MAAAA,YAAY,CAAEI,UAAD,IAAgB,CAACA,UAAlB,CAAZ;AACA,KAhBD,CAgBE,OAAOH,KAAP,EAAc;AACfC,MAAAA,QAAQ,CAACD,KAAK,CAACqB,OAAP,CAAR;AACA;AACD;;AACD5B,EAAAA,SAAS,CAAC,MAAM;AACfS,IAAAA,kBAAkB;AAClB,GAFQ,EAEP,EAFO,CAAT;AAGA,MAAIoB,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAd;;AACA,MAAIxB,SAAJ,EAAe;AACdwB,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAV;AACA;;AACD,MAAI,CAACxB,SAAD,IAAcF,MAAM,CAAC2B,MAAP,GAAgB,CAAlC,EAAqC;AACpCD,IAAAA,OAAO,gBAAG,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE1B,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;AACA;;AACD,MAAII,KAAJ,EAAW;AACVsB,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAItB,KAAJ,CAAV;AACA;;AAED,sBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAQ,IAAA,OAAO,EAAEE,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,CADD,eAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUoB,OAAV,CAJD,CADD;AAQA;;AAED,eAAe3B,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import { useState }, React from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n\tconst [movies, setMovies] = useState([]);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [error, setError] = useState(null);\n\tasync function fetchMoviesHandler() {\n\t\tsetIsLoading((prevStatus) => !prevStatus);\n\t\ttry {\n\t\t\tconst rsvp = await fetch(\"https://swapi.dev/api/films\");\n\t\t\tif (!rsvp.ok) {\n\t\t\t\tthrow new Error(\"Something Went Wrong!\");\n\t\t\t}\n\t\t\tconst data = await rsvp.json();\n\t\t\tconst transformedMovies = data.results.map((movie) => {\n\t\t\t\treturn {\n\t\t\t\t\tid: movie.episode_id,\n\t\t\t\t\ttitle: movie.title,\n\t\t\t\t\topeningText: movie.opening_crawl,\n\t\t\t\t\treleaseDate: movie.release_date,\n\t\t\t\t};\n\t\t\t});\n\t\t\tsetMovies(transformedMovies);\n\t\t\tsetIsLoading((prevStatus) => !prevStatus);\n\t\t} catch (error) {\n\t\t\tsetError(error.message);\n\t\t}\n\t}\n\tuseEffect(() => {\n\t\tfetchMoviesHandler();\n\t},[]);\n\tlet content = <p>No Movies Found. Try Again.</p>;\n\tif (isLoading) {\n\t\tcontent = <p>Loading ...</p>;\n\t}\n\tif (!isLoading && movies.length > 0) {\n\t\tcontent = <MoviesList movies={movies} />;\n\t}\n\tif (error) {\n\t\tcontent = <p>{error}</p>;\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<section>\n\t\t\t\t<button onClick={fetchMoviesHandler}>Fetch Movies</button>\n\t\t\t</section>\n\t\t\t<section>{content}</section>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}